import {createSlice} from '@reduxjs/toolkit';
import axios from 'axios';
const authSlice = createSlice({
    name:'auth',
    initialState:{
        user:null,
        loading:false,
        error:null,
        message:null,
        isAuthenticated:false,
    },
    reducers:{
        registerRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        registerSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
        },
        registerFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
        otpVerificationRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        otpVerificationSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
            state.isAuthenticated=true;
            state.user=action.payload.user;
        },
        otpVerificationFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
        loginRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        loginSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
            state.isAuthenticated=true;
            state.user=action.payload.user;
        },
        loginFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
        logoutRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        logoutSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
            state.isAuthenticated=false;
            state.user=null;
        },
        logoutFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
            state.message=null;
        },
        resetAuthSlice:(state)=>{
            state.loading=false;
            state.error=null;
            state.message=null;
            state.user=state.user;
            state.isAuthenticated=state.isAuthenticated;
        },
        getUserRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        getUserSuccess:(state,action)=>{
            state.loading=false;
            state.user=action.payload.user;
            state.isAuthenticated=true;
        },
        getUserFail:(state)=>{
            state.loading=false;
            state.isAuthenticated=false;
            state.user=null;
        },
        forgotPasswordRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        forgotPasswordSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
        },
        forgotPasswordFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
        resetPasswordRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        resetPasswordSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload.message;
            state.user=action.payload.user;
            state.isAuthenticated=true;
        },
        resetPasswordFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
        updatePasswordRequest:(state)=>{
            state.loading=true;
            state.error=null;
            state.message=null;
        },
        updatePasswordSuccess:(state,action)=>{
            state.loading=false;
            state.message=action.payload;
            
        },
        updatePasswordFail:(state,action)=>{
            state.loading=false;
            state.error=action.payload;
        },
    }})
    export const register=(data)=>async (dispatch)=>{
        dispatch(authSlice.actions.registerRequest());
        await axios.post('https://library-management-system-six-liard.vercel.app/api/v1/auth/register',data,{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.registerSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.registerFail(err.response.data.message));
        });
    }
    export const resetAuthSlice=()=>async (dispatch)=>{
        dispatch(authSlice.actions.resetAuthSlice()); 
    }
    export const otpVerification=({email,otp})=>async (dispatch)=>{
        dispatch(authSlice.actions.otpVerificationRequest());
        await axios.post('https://library-management-system-six-liard.vercel.app/api/v1/auth/verify-otp',{email,otp},{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.otpVerificationSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.otpVerificationFail(err.response.data.message));
        });
    }
    export const login=(data)=>async (dispatch)=>{
        dispatch(authSlice.actions.loginRequest());
        await axios.post('https://library-management-system-six-liard.vercel.app/api/v1/auth/login',data,{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.loginSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.loginFail(err.response.data.message));
        });
    }
    export const logout=()=>async (dispatch)=>{
        dispatch(authSlice.actions.logoutRequest());
        await axios.get('https://library-management-system-six-liard.vercel.app/api/v1/auth/logout',{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.logoutSuccess(res.data.message));
            dispatch(authSlice.actions.resetAuthSlice());
        }).catch((err)=>{
            dispatch(authSlice.actions.logoutFail(err.response.data.message));
        });
    }
    export const getUser=()=>async (dispatch)=>{
        dispatch(authSlice.actions.getUserRequest());
        await axios.get('https://library-management-system-six-liard.vercel.app/api/v1/auth/me',{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.getUserSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.getUserFail(err.response.data.message));
        });
    }
    export const forgotPassword=(email)=>async (dispatch)=>{
        dispatch(authSlice.actions.forgotPasswordRequest());
        await axios.post('https://library-management-system-six-liard.vercel.app/api/v1/auth/password/forgot',email,{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.forgotPasswordSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.forgotPasswordFail(err.response.data.message));
        });
    }
    export const resetPassword=({token,data})=>async (dispatch)=>{
        dispatch(authSlice.actions.resetPasswordRequest());
        await axios.put(`https://library-management-system-six-liard.vercel.app/api/v1/auth/password/reset/${token}`,data,{
            withCredentials:true,
            headers:{
                'Content-Type':'application/json',
            },
        }).then((res)=>{
            dispatch(authSlice.actions.resetPasswordSuccess(res.data));
        }).catch((err)=>{
            dispatch(authSlice.actions.resetPasswordFail(err.response.data.message));
        });
    }
    export const updatePassword=(data)=>async (dispatch)=>{
    dispatch(authSlice.actions.updatePasswordRequest());
    await axios.put('https://library-management-system-six-liard.vercel.app/api/v1/auth/password/update',data,{
        withCredentials:true,
        headers:{
            'Content-Type':'application/json',
        },
    }).then((res)=>{
        dispatch(authSlice.actions.updatePasswordSuccess(res.data.message));
    }).catch((err)=>{
        dispatch(authSlice.actions.updatePasswordFail(err.response.data.message));
    });
    }
    export default authSlice.reducer;
